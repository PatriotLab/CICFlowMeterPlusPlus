apply plugin: 'java'
apply plugin: 'application'

group = 'edu.dsu.patriot'
version = '1.0'
description = """CICFlowMeter++"""

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://clojars.org/repo" }
}
dependencies {
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.17.1'
    implementation group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.36'
    implementation group: 'jnetpcap', name: 'jnetpcap', version: '1.4.r1425-1g'
    implementation group: 'junit', name: 'junit', version: '4.13.2'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
    implementation group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
    implementation group: 'commons-io', name: 'commons-io', version: '2.11.0'
    implementation group: 'org.jfree', name: 'jfreechart', version: '1.5.3'
    implementation group: 'org.apache.tika', name: 'tika-core', version: '2.4.1'
    implementation group: 'com.tdunning', name: 't-digest', version: '3.3'
    implementation group: 'org.jpmml', name:'pmml-sklearn', version: '1.7.9'
    implementation group: 'org.jpmml', name: 'pmml-evaluator-metro', version: '1.6.3'
    implementation group: 'org.jpmml', name:'pmml-evaluator', version: '1.5.3'
    implementation group: 'org.jpmml', name:'pmml-evaluator', version: '1.5.15'
    implementation group: 'org.jpmml', name: 'pmml-lightgbm', version: '1.4.3'
    implementation group: 'org.jpmml', name: 'pmml-sparkml', version: '2.2.0'
    implementation group: 'com.beust', name: 'jcommander', version: '1.82'
    implementation group: 'org.apache.spark', name: 'spark-sql_2.13', version: '3.3.0'
    implementation group: 'org.apache.spark', name: 'spark-mllib_2.13', version: '3.3.0'
}
sourceSets {
    main {
        java {
            srcDir 'src'
            exclude '**/CICFlowMeter.java'
        }
    }
}

task zipSrc(type: Zip){
    archiveBaseName = "${applicationName}-Source"
    destinationDirectory = file('build/')
    from('.'){
        include '**/'
        exclude '.gradle/','build/','bin/','logs/','*.iml','*.ipr','*.iws','.idea/','out/','data/'
        into "${applicationName}V${archiveVersion}-Src"
    }
}

import org.apache.tools.ant.DirectoryScanner
task zipPro(type: Zip){

    doFirst {
        DirectoryScanner.defaultExcludes.each { DirectoryScanner.removeDefaultExclude it }
        //DirectoryScanner.addDefaultExclude 'something has to be in here or everything gets excluded'
    }

    doLast {
        DirectoryScanner.resetDefaultExcludes()
    }

    archiveBaseName = "${applicationName}-Full"
    destinationDirectory = file('build/')

    from('.'){
        include '**/'
        exclude '.gradle/','build/','bin/','logs/','*.iml','*.ipr','*.iws','.idea/','out/','data/',".git/"
        into "${applicationName}V${archiveVersion}"
    }
}


task fatJar(type: Jar) {
    println 'type Jar'

    manifest {

        attributes 'Premain-Class': 'swing.common.ObjectSizeFetcher'
        attributes 'Can-Retransform-Classes': true
        attributes 'Implementation-Title': 'Gradle Jar File Example',
                'Implementation-Version': archiveVersion,
                'Main-Class': 'cic.cs.unb.ca.ifm.App'

    }
    /*baseName = "NetWorkTraffic" + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    into(new File('build/jar/'))
    with jar*/
}

task execute(type: JavaExec) {
    println 'type JavaExec'

    mainClass = 'cic.cs.unb.ca.ifm.App'
    classpath = sourceSets.main.runtimeClasspath
    String osName = System.getProperty('os.name').toLowerCase()
    if(osName.contains('windows')){
        jvmArgs '-Djava.library.path=jnetpcap/win/jnetpcap-1.4.r1425'
    }else{
        jvmArgs '-Djava.library.path=jnetpcap/linux/jnetpcap-1.4.r1425'
    }
}

task exeCMD(type: JavaExec){
    mainClass = 'cic.cs.unb.ca.ifm.Cmd'
    classpath = sourceSets.main.runtimeClasspath
    String osName = System.getProperty('os.name').toLowerCase()
    if(osName.contains('windows')){
        jvmArgs '-Djava.library.path=jnetpcap/win/jnetpcap-1.4.r1425'
    }else{
        jvmArgs '-Djava.library.path=jnetpcap/linux/jnetpcap-1.4.r1425'
    }
}

task cmdScript(type: CreateStartScripts) {
    mainClass = "cic.cs.unb.ca.ifm.Cmd"
    applicationName = "cfm"
    outputDir = new File(project.buildDir, 'scripts')
    classpath = jar.outputs.files + project.configurations.runtimeOnly
    defaultJvmOpts = ["-Djava.library.path=../lib/native"]
}

applicationDistribution.into("bin") {
    from(cmdScript)
    fileMode = 0755
}


// The Application Plugin
mainClassName = "cic.cs.unb.ca.ifm.App"
applicationName = "CICFlowMeter"
applicationDefaultJvmArgs = ["-Djava.library.path=../lib/native"]

applicationDistribution.from("jnetpcap/linux/jnetpcap-1.4.r1425") {
    include "*.so"
    into('lib/native')
}
applicationDistribution.from("jnetpcap/win/jnetpcap-1.4.r1425") {
    include "*.dll"
    into('lib/native')
}
applicationDistribution.from('LICENSE.txt'){
    into('')
}
